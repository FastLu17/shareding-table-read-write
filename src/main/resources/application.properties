server.port=8888

# mybatis-plus 配置
mybatis-plus.mapper-locations=classpath*:/mappers/**/*.xml
mybatis-plus.type-aliases-package=com.luxf.mybatis.plus.**.entity
mybatis-plus.configuration.map-underscore-to-camel-case=true
mybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl
# @Deprecated com.baomidou.mybatisplus.extension.handlers.MybatisEnumTypeHandler
# 必须指定默认的枚举转换器、否则枚举转换不生效、
mybatis-plus.configuration.default-enum-type-handler=com.baomidou.mybatisplus.core.handlers.MybatisEnumTypeHandler


spring.main.allow-bean-definition-overriding=true

# 以下是 sharding sphere 配置
spring.shardingsphere.datasource.names=master,slave
# 主数据源
spring.shardingsphere.datasource.master.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.master.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.master.url=jdbc:mysql://localhost:3306/ds_1?useUnicode=true&characterEncoding=utf-8&useSSL=true&serverTimezone=UTC
spring.shardingsphere.datasource.master.username=root
spring.shardingsphere.datasource.master.password=123456

# 从数据源
spring.shardingsphere.datasource.slave.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.slave.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.slave.url=jdbc:mysql://localhost:3306/ds_2?useUnicode=true&characterEncoding=utf-8&useSSL=true&serverTimezone=UTC
spring.shardingsphere.datasource.slave.username=root
spring.shardingsphere.datasource.slave.password=123456

# 分库配置
# org.apache.shardingsphere.core.route.router.masterslave.ShardingMasterSlaveRouter.route(org.apache.shardingsphere.core.route.SQLRouteResult)
# 这个方法中,将ds_1转换为master、 ds_2无法转换为slave.(插入只有一个主库) 因此会抛出异常.
# 如果不是主从, 则会将真实的数据库名 转换为 datasourceNames.
# AbstractConnectionAdapter.getConnections() 抛出异常 Missing the data source name.
# TODO: 一主一从 无需分库、
#spring.shardingsphere.sharding.default-database-strategy.inline.algorithm-expression=ds_$->{(id%2)+1}
#spring.shardingsphere.sharding.default-database-strategy.inline.sharding-column=id

# 不分库分表的数据源指定
#spring.shardingsphere.sharding.default-data-source-name=ds_1
# 广播表, 每个节点复制一份, 适用于配置类的数据、
#spring.shardingsphere.sharding.broadcast-tables=region

# 分表配置
#spring.shardingsphere.sharding.tables.user.actual-data-nodes=ds_$->{1..2}.user_$->{0..3}
spring.shardingsphere.sharding.tables.user.actual-data-nodes=ds_1.user_$->{0..3}
# 自定义分库分表算法、
#spring.shardingsphere.sharding.tables.user.table-strategy.standard.precise-algorithm-class-name=com.luxf.sharding.algorithm.IPreciseShardingAlgorithm
#spring.shardingsphere.sharding.tables.user.table-strategy.standard.sharding-column=id
#spring.shardingsphere.sharding.tables.user.table-strategy.inline.sharding-column=id
#spring.shardingsphere.sharding.tables.user.table-strategy.inline.algorithm-expression=user_$->{id.longValue() % 4}

# 自定义Hint分片算法
#spring.shardingsphere.sharding.tables.user.table-strategy.hint.algorithm-class-name=com.luxf.sharding.algorithm.IHintShardingAlgorithm

# 自定义复杂分片算法
spring.shardingsphere.sharding.tables.user.table-strategy.complex.sharding-columns=city,name
spring.shardingsphere.sharding.tables.user.table-strategy.complex.algorithm-class-name=com.luxf.sharding.algorithm.IComplexKeysShardingAlgorithm

# 绑定表: 指分片规则一致的主表和子表。例如：t_order 表和 t_order_item 表, 均按照 order_id 分片, 则此两张表互为绑定表关系。绑定表之间的多表关联查询不会出现笛卡尔积关联、
# 但是使用 user.id 和 answer.user_id, 不是绑定表关系、会产生笛卡尔积.
# TODO: 故绑定表之间的分区键要完全相同。# spring.shardingsphere.sharding.binding-tables=

spring.shardingsphere.sharding.tables.answer.actual-data-nodes=ds_1.answer_$->{0..3}
#spring.shardingsphere.sharding.tables.answer.table-strategy.inline.sharding-column=user_id
#spring.shardingsphere.sharding.tables.answer.table-strategy.inline.algorithm-expression=answer_$->{user_id.longValue() % 4}
spring.shardingsphere.sharding.tables.answer.table-strategy.hint.algorithm-class-name=com.luxf.sharding.algorithm.IHintShardingAlgorithm

# 配置生成主键、
#spring.shardingsphere.sharding.tables.user.key-generator.column=id
#spring.shardingsphere.sharding.tables.user.key-generator.type=SNOWFLAKE

# 读写分离配置 (指明真实库'ds_1'的读写数据源)
spring.shardingsphere.sharding.master-slave-rules.ds_1.master-data-source-name=master
spring.shardingsphere.sharding.master-slave-rules.ds_1.slave-data-source-names=slave

# 显示SQL
spring.shardingsphere.props.sql.show=true